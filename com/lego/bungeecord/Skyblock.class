package com.lego.bungeecord;

import java.io.File;
import java.io.IOException;
import java.util.List;
import net.md_5.bungee.BungeeCord;
import net.md_5.bungee.api.ChatColor;
import net.md_5.bungee.api.CommandSender;
import net.md_5.bungee.api.chat.ComponentBuilder;
import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.config.ListenerInfo;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.plugin.Command;
import net.md_5.bungee.config.Configuration;
import net.md_5.bungee.config.ConfigurationProvider;
import net.md_5.bungee.config.YamlConfiguration;

public class Skyblock extends Command {
    public Skyblock() {
        super("skyblock");
    }

    public void execute(CommandSender sender, String[] args) {
        if (!(sender instanceof ProxiedPlayer)) {
            sender.sendMessage(new TextComponent("You must be a player to do /skyblock"));
        } else {
            ProxiedPlayer p = (ProxiedPlayer)sender;
            if (this.getDisabledServers().contains(p.getServer().getInfo().getName())) {
                p.sendMessage((new ComponentBuilder(this.getDisabledError())).color(ChatColor.RED).create());
            } else {
                String s = this.getFactions();
                if (s.equalsIgnoreCase("default")) {
                    ListenerInfo listener = p.getPendingConnection().getListener();
                    s = listener.getFallbackServer();
                }

                if (p.getServer().getInfo().getName().equals(s)) {
                    p.sendMessage((new ComponentBuilder(this.getError())).color(ChatColor.RED).create());
                } else {
                    p.connect(BungeeCord.getInstance().getServerInfo(s));
                }
            }
        }
    }

    private String getFactions() {
        Configuration c = null;

        try {
            c = ConfigurationProvider.getProvider(YamlConfiguration.class).load(new File(Main.getInstance().getDataFolder(), "config.yml"));
        } catch (IOException var3) {
            var3.printStackTrace();
        }

        return c.getString("skyblock");
    }

    private String getError() {
        Configuration c = null;

        try {
            c = ConfigurationProvider.getProvider(YamlConfiguration.class).load(new File(Main.getInstance().getDataFolder(), "config.yml"));
        } catch (IOException var3) {
            var3.printStackTrace();
        }

        return c.getString("alreadyInServer");
    }

    private String getDisabledError() {
        Configuration c = null;

        try {
            c = ConfigurationProvider.getProvider(YamlConfiguration.class).load(new File(Main.getInstance().getDataFolder(), "config.yml"));
        } catch (IOException var3) {
            var3.printStackTrace();
        }

        return c.getString("disabledServersError");
    }

    private List<String> getDisabledServers() {
        Configuration c = null;

        try {
            c = ConfigurationProvider.getProvider(YamlConfiguration.class).load(new File(Main.getInstance().getDataFolder(), "config.yml"));
        } catch (IOException var3) {
            var3.printStackTrace();
        }

        return c.getStringList("disabled-servers");
    }
}
